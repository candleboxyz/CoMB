
---
// Define component props interface
export interface Props {
  collapsible?: boolean;  // Whether the output can be collapsed
  summary?: string;       // Text shown in the summary/header
  code?: string;         // Pre-formatted code content (alternative to slot)
}

const { collapsible = false, summary = "Show Output", code } = Astro.props;

// Use code prop if provided, otherwise render slot content
let content = code;

if (!content) {
  // Get slot content as text
  const slotContent = await Astro.slots.render('default');
  
  // Convert HTML entities back to actual characters
  // This prevents double-escaping of special characters
  // NOTE: This is safe from XSS because we use {content} (not set:html),
  // which means Astro will escape the content again when rendering
  content = slotContent
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'")
    .replace(/&amp;/g, '&');  // Important: decode &amp; last to avoid double-decoding
}

// Remove leading newline from template literals (both code prop and slot content)
if (content && content.startsWith('\n')) {
  content = content.trimStart();
}
---

<!-- Render collapsible or non-collapsible output box based on prop -->
{collapsible ? (
    <details class="samp-box">
        <summary>
            {summary}
            <span class="dot" />
        </summary>
        <pre><samp>{content}</samp></pre>
    </details>
) : (
    <details class="samp-box non-collapsible" open>
        <summary>
            {summary}
        </summary>
        <pre><samp>{content}</samp></pre>
    </details>
)}

<style>
    pre {
        margin: 1em 0;
        padding: 1em;
        border-radius: 10px;
        white-space: pre-wrap;
        overflow-x: auto;
        /* font-family: 'Fira Code', monospace; */
    }

    :root {
        --samp-hover-color: #888;
        --samp-dot-color: #3D4FF5; /* Blue dot color */
    }
    /* ⭐ TODO: Add light/dark mode style transitions */

    /* Base summary styles */
    .samp-box > summary {
        cursor: pointer;
        font-weight: bold;
        display: flex;
        align-items: center;
        gap: 0.5em;
        transition: color 0.2s ease;
        color: inherit;
        position: relative;
    }

    /* Dot indicator */
    .samp-box > summary .dot {
        content: '';
        width: 0.35em;
        height: 0.35em;
        border-radius: 50%;
        background-color: transparent;
        transition: background-color 0.2s ease;
        margin-left: 0.1em;
        margin-bottom: 0.5em;
    }

    /* Show dot on hover (only when closed) */
    .samp-box:not([open]) > summary:hover .dot {
        background-color: var(--samp-dot-color);
    }

    /* Always show dot when open */
    .samp-box[open] > summary .dot {
        background-color: var(--samp-dot-color);
    }

    /* Summary text color on hover */
    .samp-box > summary:hover {
        color: var(--samp-hover-color);
    }

    /* non-collapsible - click inactive */
    .samp-box.non-collapsible {
        pointer-events: none;
    }

    /* non-collapsible - remove toggle arrow */
    .samp-box.non-collapsible > summary::before,
    .samp-box.non-collapsible > summary::after {
        content: none !important;
        display: none !important;
    }
</style>
